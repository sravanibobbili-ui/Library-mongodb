{"ast":null,"code":"// To connect with your mongoDB database\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/', {\n  dbName: 'users',\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}, err => err ? console.log(err) : console.log('Connected to {dbName} database'));\n\n// Schema for users of app\nconst UserSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  date: {\n    type: Date,\n    default: Date.now\n  }\n});\nconst User = mongoose.model('users', UserSchema);\nUser.createIndexes();\n\n// For backend and express\nconst express = require('express');\nconst app = express();\nconst cors = require(\"cors\");\nconsole.log(\"App listen at port 5000\");\napp.use(express.json());\napp.use(cors());\napp.get(\"/\", (req, resp) => {\n  resp.send(\"App is Working\");\n  // You can check backend is working or not by \n  // entering http://loacalhost:5000\n\n  // If you see App is working means\n  // backend working properly\n});\napp.post(\"/register\", async (req, resp) => {\n  try {\n    const user = new User(req.body);\n    let result = await user.save();\n    result = result.toObject();\n    if (result) {\n      delete result.password;\n      resp.send(req.body);\n      console.log(result);\n    } else {\n      console.log(\"User already register\");\n    }\n  } catch (e) {\n    resp.send(\"Something Went Wrong\");\n  }\n});\napp.listen(5000);","map":{"version":3,"names":["mongoose","require","connect","dbName","useNewUrlParser","useUnifiedTopology","err","console","log","UserSchema","Schema","name","type","String","required","email","unique","date","Date","default","now","User","model","createIndexes","express","app","cors","use","json","get","req","resp","send","post","user","body","result","save","toObject","password","e","listen"],"sources":["C:/Users/sbobbili/Projects/react-bootstrap-project/src/backend/Connect.js"],"sourcesContent":["// To connect with your mongoDB database\r\nconst mongoose = require('mongoose');\r\nmongoose.connect('mongodb://localhost:27017/', {\r\n    dbName: 'users',\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n}, err => err ? console.log(err) : \r\n    console.log('Connected to {dbName} database'));\r\n \r\n// Schema for users of app\r\nconst UserSchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n    },\r\n    date: {\r\n        type: Date,\r\n        default: Date.now,\r\n    },\r\n});\r\nconst User = mongoose.model('users', UserSchema);\r\nUser.createIndexes();\r\n \r\n// For backend and express\r\nconst express = require('express');\r\nconst app = express();\r\nconst cors = require(\"cors\");\r\nconsole.log(\"App listen at port 5000\");\r\napp.use(express.json());\r\napp.use(cors());\r\napp.get(\"/\", (req, resp) => {\r\n \r\n    resp.send(\"App is Working\");\r\n    // You can check backend is working or not by \r\n    // entering http://loacalhost:5000\r\n     \r\n    // If you see App is working means\r\n    // backend working properly\r\n});\r\n \r\napp.post(\"/register\", async (req, resp) => {\r\n    try {\r\n        const user = new User(req.body);\r\n        let result = await user.save();\r\n        result = result.toObject();\r\n        if (result) {\r\n            delete result.password;\r\n            resp.send(req.body);\r\n            console.log(result);\r\n        } else {\r\n            console.log(\"User already register\");\r\n        }\r\n \r\n    } catch (e) {\r\n        resp.send(\"Something Went Wrong\");\r\n    }\r\n});\r\napp.listen(5000);"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpCD,QAAQ,CAACE,OAAO,CAAC,4BAA4B,EAAE;EAC3CC,MAAM,EAAE,OAAO;EACfC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACxB,CAAC,EAAEC,GAAG,IAAIA,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,GAC5BC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC,CAAC;;AAElD;AACA,MAAMC,UAAU,GAAG,IAAIT,QAAQ,CAACU,MAAM,CAAC;EACnCC,IAAI,EAAE;IACFC,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACd,CAAC;EACDC,KAAK,EAAE;IACHH,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,IAAI;IACdE,MAAM,EAAE;EACZ,CAAC;EACDC,IAAI,EAAE;IACFL,IAAI,EAAEM,IAAI;IACVC,OAAO,EAAED,IAAI,CAACE;EAClB;AACJ,CAAC,CAAC;AACF,MAAMC,IAAI,GAAGrB,QAAQ,CAACsB,KAAK,CAAC,OAAO,EAAEb,UAAU,CAAC;AAChDY,IAAI,CAACE,aAAa,CAAC,CAAC;;AAEpB;AACA,MAAMC,OAAO,GAAGvB,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMwB,GAAG,GAAGD,OAAO,CAAC,CAAC;AACrB,MAAME,IAAI,GAAGzB,OAAO,CAAC,MAAM,CAAC;AAC5BM,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;AACtCiB,GAAG,CAACE,GAAG,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;AACvBH,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC,CAAC,CAAC;AACfD,GAAG,CAACI,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,IAAI,KAAK;EAExBA,IAAI,CAACC,IAAI,CAAC,gBAAgB,CAAC;EAC3B;EACA;;EAEA;EACA;AACJ,CAAC,CAAC;AAEFP,GAAG,CAACQ,IAAI,CAAC,WAAW,EAAE,OAAOH,GAAG,EAAEC,IAAI,KAAK;EACvC,IAAI;IACA,MAAMG,IAAI,GAAG,IAAIb,IAAI,CAACS,GAAG,CAACK,IAAI,CAAC;IAC/B,IAAIC,MAAM,GAAG,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;IAC9BD,MAAM,GAAGA,MAAM,CAACE,QAAQ,CAAC,CAAC;IAC1B,IAAIF,MAAM,EAAE;MACR,OAAOA,MAAM,CAACG,QAAQ;MACtBR,IAAI,CAACC,IAAI,CAACF,GAAG,CAACK,IAAI,CAAC;MACnB5B,OAAO,CAACC,GAAG,CAAC4B,MAAM,CAAC;IACvB,CAAC,MAAM;MACH7B,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACxC;EAEJ,CAAC,CAAC,OAAOgC,CAAC,EAAE;IACRT,IAAI,CAACC,IAAI,CAAC,sBAAsB,CAAC;EACrC;AACJ,CAAC,CAAC;AACFP,GAAG,CAACgB,MAAM,CAAC,IAAI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}